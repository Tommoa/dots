if not test -d $HOME/.config/ion/plugins
	# We don't have plugins, so clone them in first.
	git clone https://gitlab.redox-os.org/redox-os/ion-plugins $HOME/.config/ion/plugins
end

if matches $(uname) "Darwin"
	# We're on OSX
	# We need to set PATH here because if we try to set it later, we will error
	# on all things installed by homebrew.
	# Set path to use homebrew's less
	export PATH=/usr/local/bin:$PATH:/usr/local/texlive/2019/bin/x86_64-darwin
	export PAGER=less
end

source ~/.config/ion/plugins/init.ion
source ~/.config/ion/plugins/tools/gpg-agent.ion

export SKIM_DEFAULT_OPTIONS="--multi --ansi --bind=ctrl-e:up --preview='bat --plain --color=always {}'"

if not exists -s SSH_CLIENT
	# Only launch TMUX if we're not in an SSH session
	if not exists -s TMUX
		# We're not already in a TMUX session
		let tmux = $(/usr/bin/env which tmux)
		$tmux attach
		if not eq $? 0
			$tmux new-session
		end
		exit
	end
end

fn PROMPT
	fn ssh_prompt
		if exists -s SSH_CLIENT
			# We're in an SSH session.
			printf "${c::red}\@${c::black}${HOST}"
		end
	end
	fn kube_prompt
		if exists -b kubectl
			# We have kubectl.
			let context = $(kubectl config current-context)
			if not eq $len(context) 0
				# Icons:
				# \u2388: ⎈
				# \u2638: ☸
				printf "${c::default,bold}{${c::light_red}☸${c::default}:${c::blue}${context}${c::default}}${c::reset} "
			end
		end
	end
	printf "$(kube_prompt)${c::0x55,bold}${USER}$(ssh_prompt)${c::default}:${c::0x4B}${SWD}${c::default}# ${c::reset}"
	drop kube_prompt
	drop ssh_prompt
end

fn kctx context:str
	kubectl config use-context $context
end

fn show what:str
	match @split(what)[0]
		case "kctx"
			kubectl config get-contexts
		case _
			echo "[${color::red}@split(what)[0]${color::reset}] does not seem to exist"
			echo "options:${color::blue}"
			echo -e "\tkctx"
			printf "${color::reset}"
	end
end

fn no what:str
	match @split(what)[0]
		case "kctx"
			kubectl config unset current-context
		case _
			echo "[${color::red}@split(what)[0]${color::reset}] does not seem to exist"
			echo "options:${color::blue}"
			echo -e "\tkctx"
			printf "${color::reset}"
	end
end

fn update_rust
	let gitdr = $(git fetch --dry-run &| wc -l)
	let gitdr:int = $((gitdr))
	if test $(echo $gitdr) -ne 0
		echo "${c::red}Updating${c::reset}"
		git checkout .
		git pull --recurse-submodules
		cargo install --path . --force
	else
		echo "${c::green}Already updated!${c::reset}"
	end
end

export EDITOR=nvim

source ~/.cargo/env
